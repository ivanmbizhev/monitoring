kube-prometheus-stack:
  namespaceOverride: "monitoring"

  grafana:
    enabled: true
    persistence:
      enabled: true
      type: pvc
      size: 500Mi
    additionalDataSources:
    # https://grafana.com/docs/grafana/latest/datasources/tempo/configure-tempo-data-source/
      - name: Loki
        type: loki
        uid: loki
        url: http://prom-loki-gateway.monitoring.svc.cluster.local
        access: proxy
        editable: true
        jsonData:
          derivedFields:
          - datasourceUid: tempo
            matcherRegex: "\"trace_id\": \"(\\w+)\""
            name: TraceID
            url: "$${__value.raw}"
            urlDisplayLabel: "Tempo - Trace"
        version: 1
      - name: Prom-Loki-Tempo
        type: tempo
        uid: tempo
        url: http://tempo.monitoring.svc.cluster.local:3100
        access: proxy
        editable: true
        jsonData:
          tracesToLogsV2:
          # Field with an internal link pointing to a logs data source in Grafana.
          # datasourceUid value must match the uid value of the logs data source.
            datasourceUid: 'loki'
            tags: ['job', 'instance', 'pod', 'namespace']
          tracesToMetrics:
            datasourceUid: 'prometheus'
            spanStartTimeShift: '1h'
            spanEndTimeShift: '-1h'
            tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
            queries:
              - name: 'Sample query'
                query: 'sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))'
          serviceMap:
            datasourceUid: 'prometheus'
          nodeGraph:
            enabled: true
          search:
            hide: false  
          lokiSearch:
            datasourceUid: 'loki'
          traceQuery:
            timeShiftEnabled: true
            spanStartTimeShift: '1h'
            spanEndTimeShift: '-1h'
          spanBar:
            type: 'Tag'
            tag: 'http.path'  
        version: 1  
  alertmanager:
    enabled: false

  kube-state-metrics:
    prometheus:
      selfMonitor:
        enabled: false
    selfMonitor:
      enabled: true

  # prometheus:  
  #   prometheusSpec:
  #     additionalScrapeConfigs:
  #       - job_name: 'kubernetes-endpoints'
  #         kubernetes_sd_configs:
  #           - role: endpoints
  #         relabel_configs:
  #           - source_labels: [__meta_kubernetes_pod_label_k8s_app]
  #             action: keep
  #             regex: cilium
  #           - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
  #             action: keep
  #             regex: true
  #           - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
  #             action: replace
  #             target_label: __scheme__
  #             regex: (https?)
  #           - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
  #             action: replace
  #             target_label: __metrics_path__
  #             regex: (.+)
  #           - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
  #             action: replace
  #             target_label: __address__
  #             regex: (.+)(?::\d+);(\d+)
  #             replacement: $1:$2
  #           - action: labelmap
  #             regex: __meta_kubernetes_service_label_(.+)
  #           - source_labels: [__meta_kubernetes_namespace]
  #             action: replace
  #             target_label: namespace
  #           - source_labels: [__meta_kubernetes_service_name]
  #             action: replace
  #             target_label: service
    
  #       # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L156
  #       - job_name: 'kubernetes-pods'
  #         kubernetes_sd_configs:
  #           - role: pod
  #         relabel_configs:
  #           - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
  #             action: keep
  #             regex: true
  #           - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
  #             action: replace
  #             target_label: __metrics_path__
  #             regex: (.+)
  #           - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
  #             action: replace
  #             regex: (.+):(?:\d+);(\d+)
  #             replacement: ${1}:${2}
  #             target_label: __address__
  #           - action: labelmap
  #             regex: __meta_kubernetes_pod_label_(.+)
  #           - source_labels: [__meta_kubernetes_namespace]
  #             action: replace
  #             target_label: namespace
  #           - source_labels: [__meta_kubernetes_pod_name]
  #             action: replace
  #             target_label: pod
  #           - source_labels: [__meta_kubernetes_pod_container_port_number]
  #             action: keep
  #             regex: \d+
    
  #       # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L119
  #       - job_name: 'kubernetes-services'
  #         metrics_path: /metrics
  #         params:
  #           module: [http_2xx]
  #         kubernetes_sd_configs:
  #           - role: service
  #         relabel_configs:
  #           - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
  #             action: keep
  #             regex: true
  #           - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
  #             action: replace
  #             regex: ([^:]+)(?::\d+)?;(\d+)
  #             replacement: ${1}:${2}
  #             target_label: __address__
  #           - action: labelmap
  #             regex: __meta_kubernetes_service_label_(.+)
  #           - source_labels: [__meta_kubernetes_namespace]
  #             target_label: namespace
  #           - source_labels: [__meta_kubernetes_service_name]
  #             target_label: service

              
  prometheusOperator:
      networkPolicy:
        enabled: true
        flavor: cilium
        # cilium:
        #  endpointSelector:
        #  egress:
        #  ingress:

loki:
  deploymentMode: SingleBinary
  loki:
    auth_enabled: false
    commonConfig:
      replication_factor: 1
    storage:
      type: 'filesystem'
    schemaConfig:
      configs:
      - from: "2024-01-01"
        store: tsdb
        index:
          prefix: loki_index_
          period: 24h
        object_store: filesystem # we're storing on filesystem so there's no real persistence here.
        schema: v13
    tracing:
      enabled: true
    rulerConfig:
      storage:
        type: local
  # Enable single binary mode
  singleBinary:
    # -- Number of replicas for single binary mode
    replicas: 1
  backend:
    replicas: 0
  read:
    replicas: 0
  write:
    replicas: 0
  test:
    enabled: false
  resultsCache:
    # -- Specifies whether memcached based results-cache should be enabled
    enabled: false

promtail:
  enabled: true
  config:
    logLevel: info
    serverPort: 3101
    clients:
      - url: http://prom-loki-gateway/loki/api/v1/push

tempo:
  config:
    traces:
      otlp:
        http:
          enabled: true
        grpc:
          enabled: true
    distributor:
      config:
        log_received_spans:
          enabled: true
        log_discarded_spans:
          enabled: true